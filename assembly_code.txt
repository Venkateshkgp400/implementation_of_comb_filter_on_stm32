AREA main, CODE, READONLY ;area is a directive
EXPORT __main
ENTRY
sig dcw 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf, 0x33c7,
0x9e84, 0x3cde, 0x7fff, 0x4000, 0x59b9, 0x3cde, 0x1e84, 0x33c7,
0x92bf, 0x259e, 0x7fff, 0x13c7, 0x2485, 0x0000, 0xdb7b, 0xec39,
0x8000, 0xda62, 0x6d41, 0xcc39, 0xe17c, 0xc322, 0xa647, 0xc000,
0x8000, 0xc322, 0x617c, 0xcc39, 0xed41, 0xda62, 0xc86f, 0xec39,
0x8000, 0x0000, 0x7fff, 0x13c7, 0x3791, 0x259e, 0x12bf;
;h dcw 0xffd9, 0x0032, 0xffa2, 0xff2b, 0xffa6, 0x0009, 0xff81,
0xff14, 0xff9a, 0x0009, 0xff8c, 0xff29, 0xffba, 0x0035, 0xffc0,
0xff63, 0xfffb, 0x007c, 0x000a, 0xffac, 0x0044, 0x00c3, 0x004c,
0xffe7, 0x0079, 0x00f0, 0x006e, 0xfffd, 0x0084, 0x00f1, 0x0063,
0xffe4, 0x0060, 0x00c5, 0x002c, 0xffa5, 0x001b, 0x007c, 0xffe0,
0xff57, 0xffce, 0x0033, 0xff9c, 0xff18, 0xff97, 0x0006, 0xff79,
0xfeff, 0xff8b, 0x0008, 0xff87, 0xff18, 0xffb0, 0x0038, 0xffc0,
0xff58, 0xfff7, 0x0085, 0x0010, 0xffa8, 0x0046, 0x00d2, 0x0057,
0xffe8, 0x007e, 0x0101, 0x007c, 0xffff, 0x0089, 0x0101, 0x006f,
0xffe5, 0x0063, 0x00d1, 0x0034, 0xffa1, 0x0019, 0x0083, 0xffe4,
0xff4e, 0xffc7, 0x0035, 0xff9b, 0xff0c, 0xff8d, 0x0005, 0xff76,
0xfef2, 0xff80, 0x0006, 0xff84, 0xff0c, 0xffa6, 0x0038, 0xffc0,
0xff50, 0xfff0, 0x0088, 0x0014, 0xffa4, 0x0043, 0x00d8, 0x005f,
0xffe7, 0x007d, 0x010a, 0x0085, 0x0001, 0x008a, 0x0109, 0x0078,
0xffe6, 0x0063, 0x00d8, 0x003d, 0xffa1, 0x0017, 0x0087, 0xffe9,
0xff4c, 0xffc3, 0x0037, 0xff9e, 0xff08, 0xff86, 0x0005, 0xff79,
0x3eee, 0xff79, 0x0005, 0xff86, 0xff08, 0xff9e, 0x0037, 0xffc3,
0xff4c, 0xffe9, 0x0087, 0x0017, 0xffa1, 0x003d, 0x00d8, 0x0063,
0xffe6, 0x0078, 0x0109, 0x008a, 0x0001, 0x0085, 0x010a, 0x007d,
0xffe7, 0x005f, 0x00d8, 0x0043, 0xffa4, 0x0014, 0x0088, 0xfff0,
0xff50, 0xffc0, 0x0038, 0xffa6, 0xff0c, 0xff84, 0x0006, 0xff80,
0xfef2, 0xff76, 0x0005, 0xff8d, 0xff0c, 0xff9b, 0x0035, 0xffc7,
0xff4e, 0xffe4, 0x0083, 0x0019, 0xffa1, 0x0034, 0x00d1, 0x0063,
0xffe5, 0x006f, 0x0101, 0x0089, 0xffff, 0x007c, 0x0101, 0x007e,
0xffe8, 0x0057, 0x00d2, 0x0046, 0xffa8, 0x0010, 0x0085, 0xfff7,
0xff58, 0xffc0, 0x0038, 0xffb0, 0xff18, 0xff87, 0x0008, 0xff8b,
0xfeff, 0xff79, 0x0006, 0xff97, 0xff18, 0xff9c, 0x0033, 0xffce,
0xff57, 0xffe0, 0x007c, 0x001b, 0xffa5, 0x002c, 0x00c5, 0x0060,
0xffe4, 0x0063, 0x00f1, 0x0084, 0xfffd, 0x006e, 0x00f0, 0x0079,
0xffe7, 0x004c, 0x00c3, 0x0044, 0xffac, 0x000a, 0x007c, 0xfffb,
0xff63, 0xffc0, 0x0035, 0xffba, 0xff29, 0xff8c, 0x0009, 0xff9a,
0xff14, 0xff81, 0x0009, 0xffa6, 0xff2b, 0xffa2, 0x0032, 0xffd9;
h dcw 0x0034, 0x0026, 0xff5e, 0xffa3, 0xff47, 0x0016, 0xffd0,
0xfe9d, 0xfff4, 0xfffb, 0xff44, 0xff9f, 0xff57, 0x003f, 0x000e,
0xfee8, 0x0054, 0x006c, 0xffbe, 0x0024, 0xffe0, 0x00cd, 0x009c,
0xff6b, 0x00d4, 0x00e3, 0x0022, 0x0079, 0x0022, 0x00fc, 0x00b7,
0xff69, 0x00bf, 0x00ba, 0xffe0, 0x0025, 0xffba, 0x0087, 0x0037,
0xfedb, 0x002f, 0x0029, 0xff4d, 0xff98, 0xff35, 0x0010, 0xffd0,
0xfe80, 0xffeb, 0xfffd, 0xff35, 0xff98, 0xff4c, 0x003f, 0x0016,
0xfed6, 0x0055, 0x007a, 0xffbb, 0x0028, 0xffe1, 0x00d8, 0x00af,
0xff65, 0x00dd, 0x00f8, 0x0026, 0x0083, 0x0026, 0x0107, 0x00c9,
0xff62, 0x00c4, 0x00c9, 0xffdf, 0x0027, 0xffb7, 0x0089, 0x0040,
0xfecb, 0x0029, 0x002f, 0xff43, 0xff92, 0xff2a, 0x000a, 0xffd3,
0xfe6d, 0xffe1, 0x0000, 0xff2b, 0xff92, 0xff43, 0x003b, 0x001d,
0xfeca, 0x0051, 0x0083, 0xffb8, 0x002a, 0xffe0, 0x00da, 0x00bc,
0xff61, 0x00de, 0x0105, 0x0029, 0x0088, 0x0028, 0x010a, 0x00d7,
0xff5f, 0x00c3, 0x00d5, 0xffdf, 0x0029, 0xffb6, 0x0087, 0x0049,
0xfec6, 0x0023, 0x0035, 0xff40, 0xff90, 0xff27, 0x0004, 0xffd9,
0x3e67, 0xffd9, 0x0004, 0xff27, 0xff90, 0xff40, 0x0035, 0x0023,
0xfec6, 0x0049, 0x0087, 0xffb6, 0x0029, 0xffdf, 0x00d5, 0x00c3,
0xff5f, 0x00d7, 0x010a, 0x0028, 0x0088, 0x0029, 0x0105, 0x00de,
0xff61, 0x00bc, 0x00da, 0xffe0, 0x002a, 0xffb8, 0x0083, 0x0051,
0xfeca, 0x001d, 0x003b, 0xff43, 0xff92, 0xff2b, 0x0000, 0xffe1,
0xfe6d, 0xffd3, 0x000a, 0xff2a, 0xff92, 0xff43, 0x002f, 0x0029,
0xfecb, 0x0040, 0x0089, 0xffb7, 0x0027, 0xffdf, 0x00c9, 0x00c4,
0xff62, 0x00c9, 0x0107, 0x0026, 0x0083, 0x0026, 0x00f8, 0x00dd,
0xff65, 0x00af, 0x00d8, 0xffe1, 0x0028, 0xffbb, 0x007a, 0x0055,
0xfed6, 0x0016, 0x003f, 0xff4c, 0xff98, 0xff35, 0xfffd, 0xffeb,
0xfe80, 0xffd0, 0x0010, 0xff35, 0xff98, 0xff4d, 0x0029, 0x002f,
0xfedb, 0x0037, 0x0087, 0xffba, 0x0025, 0xffe0, 0x00ba, 0x00bf,
0xff69, 0x00b7, 0x00fc, 0x0022, 0x0079, 0x0022, 0x00e3, 0x00d4,
0xff6b, 0x009c, 0x00cd, 0xffe0, 0x0024, 0xffbe, 0x006c, 0x0054,
0xfee8, 0x000e, 0x003f, 0xff57, 0xff9f, 0xff44, 0xfffb, 0xfff4,
0xfe9d, 0xffd0, 0x0016, 0xff47, 0xffa3, 0xff5e, 0x0026, 0x0034;
f equ 14 ;length of fraction part of fixed point
l equ 892 ; Input length*2 for 2 byte alignment
hl equ 510 ; Filter length*2 for 2 byte alignment
ol equ 1400; Output length*2 for 2 byte alignment
;convlution code
;for(i=0;i<ol;i++){
;y[i]=0;
;for(j=0;i<hl;i++)
;(if(0<i-j<l){
;y[i]=y[i]+x[i-j]*h[j];
;};
;};
;};
__main
ldr r0,=sig ;Address of input signal
ldr r1,=h ;Address of filter coefficients
mov r2,#0x0000 ;output signal memory lower byte
movt r2,#0x2000 ;output signal memory upper byte 0x2000000000
mov r3,#0 ;i=0
__outer_loop ;for(i=0;i<ol;i++)
cmp r3,#ol
bge __exit_outer_loop ;exit if i>=ol
mov r4,#0 ;j=0
mov r9,#0 ;accumulator=0
__inner_loop ;for(j=0;i<hl;i++)
cmp r4,#hl
bge __exit_inner_loop ;exit if j>=hl
subs r5,r3,r4 ;r5=i-j
bmi __skip ;skip if i-j<0
cmp r5, #l
bge __skip ;skip if i-j>=length(input signal)
add r6, r5, r0 ;r6=&x[i-j], address pointer
ldrsh r11,[r6] ;r11=x[i-j]
add r7,r4,r1 ;r6=&h[j], address pointer
ldrsh r12, [r7] ;r12=h[j]
bl __mul ;r10= x[i-j]*h[j]
add r9, r9, r10 ;accumulator=accumulator+x[i-j]*h[j]
__skip
add r4, r4, #2 ;next filter coeff address
b __inner_loop ;repeat inner loop
__exit_inner_loop
add r8, r3, r2 ;r8=&y[i], address pointer
strh r9,[r8] ;store y[i] in &y[i]
;ldrsh r10,[r8] ;to check y[i]
add r3, r3, #2 ;next input signal address
b __outer_loop ;repeat outer loop
__exit_outer_loop
b __exit_outer_loop ;convolution end
__mul ;multiply two 16bit fixed point numbers in r11 & r12, product
in r10. result format A(8,8)
mul r10, r11,r12
asr r10,#f ;multiply with 2^-f, f=8, as fixed point
multiplication
cmp r10,#0
bmi __neg
movt r10,#0x0000 ;Extend upper 16bits if no is positive
bx lr
__neg
movt r10,#0xffff ;Extend upper 16bits if no is negative
bx lr
lab b lab
END